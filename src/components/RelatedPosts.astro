---
import type { CollectionEntry } from "astro:content";

type Props = {
  currentPost: CollectionEntry<"blog">;
  allPosts: CollectionEntry<"blog">[];
  maxPosts?: number;
};

const { currentPost, allPosts, maxPosts = 3 } = Astro.props;

const otherPosts = allPosts.filter(post => post.id !== currentPost.id);

function getRelatedPosts(
  post: CollectionEntry<"blog">,
  otherPosts: CollectionEntry<"blog">[],
  maxPosts: number
): CollectionEntry<"blog">[] {
  const currentTags = post.data.tags || [];
  const scoredPosts = otherPosts.map(otherPost => {
    const otherTags = otherPost.data.tags || [];
    const commonTags = currentTags.filter(tag =>
      otherTags.includes(tag)
    ).length;
    const categoryBonus =
      otherPost.data.category === post.data.category ? 2 : 0;

    return {
      post: otherPost,
      score: commonTags + categoryBonus
    };
  });

  return scoredPosts
    .filter(item => item.score > 0)
    .sort((a, b) => b.score - a.score)
    .slice(0, maxPosts)
    .map(item => item.post);
}

const relatedPosts = getRelatedPosts(currentPost, otherPosts, maxPosts);
---

{relatedPosts.length > 0 && (
  <hr class="animate mt-4 mb-4 border-black/10 dark:border-white/10" />
  <div class="animate mt-6 mb-6">
    <h2 class="text-lg font-semibold mb-4 text-black dark:text-white">You may also be interested in</h2>
    <ul class="list-disc pl-5 space-y-2 transition-colors duration-300 ease-in-out">
      {relatedPosts.map(post => (
        <li>
          <a href={`/blog/${post.slug}`} class="hover:text-black dark:hover:text-white">
            {post.data.title}
          </a>
        </li>
      ))}
    </ul>
  </div>
)}
