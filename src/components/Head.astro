---
import "../styles/global.css";
import "@fontsource/lxgw-wenkai/300.css";
import "@fontsource/lxgw-wenkai/500.css";
import "@fontsource/lxgw-wenkai/700.css";
import lxgwWenkai300 from "@fontsource/lxgw-wenkai/files/lxgw-wenkai-latin-300-normal.woff2";
import lxgwWenkai500 from "@fontsource/lxgw-wenkai/files/lxgw-wenkai-latin-500-normal.woff2";
import lxgwWenkai700 from "@fontsource/lxgw-wenkai/files/lxgw-wenkai-latin-700-normal.woff2";
import { ClientRouter } from "astro:transitions";
import { SITE } from "@consts";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { title, description, image = "/favicon.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/reflecting.svg">
<link rel="icon" type="image/x-icon" href="/reflecting.svg">
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={lxgwWenkai300} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lxgwWenkai500} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lxgwWenkai700} as="font" type="font/woff2" crossorigin/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- RSS Link -->
<link rel="alternate" type="application/rss+xml" title={SITE.NAME} href={new URL("rss.xml", Astro.site)} />

<ClientRouter  />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        "link[as=\"font\"]"
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const themeToggle = document.getElementById("theme-toggle");
    themeToggle?.addEventListener("click", () => {
      if (document.documentElement.classList.contains("dark")) {
        localStorage.setItem("theme", "light");
        toggleTheme(false);
      } else {
        localStorage.setItem("theme", "dark");
        toggleTheme(true);
      }
    });

    // add code block copy functionality
    addCopyFunctionality();

    window.matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", event => {
        if (localStorage.theme === "system" || !localStorage.theme) {
          toggleTheme(event.matches);
        }
      }
    );

    document.addEventListener("scroll", onScroll);
  }

  function addCopyFunctionality() {
    const codeBlocks = document.querySelectorAll("pre");

    codeBlocks.forEach(pre => {
      pre.addEventListener("click", async (e) => {
        const rect = pre.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        if (x > rect.width - 40 && x < rect.width - 8 && y > 8 && y < 40) {
          const code = pre.textContent || "";

          try {
            await navigator.clipboard.writeText(code);

            pre.style.setProperty("--copy-icon", "url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='2' stroke='%23ffffff'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' d='M5 13l4 4L19 7' /%3e%3c/svg%3e\")");

            setTimeout(() => {
              pre.style.removeProperty("--copy-icon");
            }, 2000);

          } catch (err) {
            console.error("copy failed:", err);
          }
        }
      });
    });
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      )
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    void window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>

<!-- Umami Analytics -->
{import.meta.env.UMAMI_SCRIPT_URL && import.meta.env.UMAMI_WEBSITE_ID && (
  <script is:inline defer src={import.meta.env.UMAMI_SCRIPT_URL} data-website-id={import.meta.env.UMAMI_WEBSITE_ID}></script>
)}
